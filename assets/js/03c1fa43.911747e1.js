"use strict";(self.webpackChunkdev_galoy_io=self.webpackChunkdev_galoy_io||[]).push([[876],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,k=d["".concat(s,".").concat(m)]||d[m]||c[m]||i;return n?r.createElement(k,o(o({ref:t},u),{},{components:n})):r.createElement(k,o({ref:t},u))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3109:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={id:"backend-servers",title:"Backend Servers",slug:"/deployment/backend-servers"},o="Backend Servers",l={unversionedId:"deployment/backend-servers",id:"deployment/backend-servers",title:"Backend Servers",description:"We use direnv to load environment variables needed for running the integration tests. Don't forget to add the direnv hook to your shell.rc file.",source:"@site/docs/deployment/b-backend-servers.md",sourceDirName:"deployment",slug:"/deployment/backend-servers",permalink:"/deployment/backend-servers",draft:!1,tags:[],version:"current",frontMatter:{id:"backend-servers",title:"Backend Servers",slug:"/deployment/backend-servers"},sidebar:"deploymentSidebar",previous:{title:"Staging Environment",permalink:"/deployment/staging-environment"},next:{title:"Galoy Pay",permalink:"/deployment/galoy-pay"}},s={},p=[{value:"Runtime dependencies",id:"runtime-dependencies",level:4},{value:"Development",id:"development",level:3},{value:"Using GraphiQL",id:"using-graphiql",level:4},{value:"Docker compose",id:"docker-compose",level:4},{value:"Testing",id:"testing",level:3},{value:"Run unit tests",id:"run-unit-tests",level:4},{value:"Run integration tests",id:"run-integration-tests",level:4},{value:"Run e2e tests",id:"run-e2e-tests",level:4},{value:"Run specific test file",id:"run-specific-test-file",level:4},{value:"Testing migrations",id:"testing-migrations",level:4},{value:"Known issues",id:"known-issues",level:4},{value:"Running checks",id:"running-checks",level:3}],u={toc:p},d="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"backend-servers"},"Backend Servers"),(0,a.kt)("p",null,"We use ",(0,a.kt)("a",{parentName:"p",href:"https://direnv.net/"},"direnv")," to load environment variables needed for running the integration tests. Don't forget to add the ",(0,a.kt)("a",{parentName:"p",href:"https://direnv.net/docs/hook.html"},"direnv hook")," to your ",(0,a.kt)("inlineCode",{parentName:"p"},"shell.rc")," file."),(0,a.kt)("p",null,"Clone the repo and install dependencies:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git clone git@github.com:GaloyMoney/galoy.git\n$ cd galoy\n$ direnv allow\ndirenv reload\ndirenv: direnv: loading ~/projects/GaloyMoney/galoy/.envrc\n(...)\n$ yarn install\n")),(0,a.kt)("h4",{id:"runtime-dependencies"},"Runtime dependencies"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ make start-deps\n\n# or\n$ make reset-deps\n")),(0,a.kt)("p",null,"Everytime the dependencies are re-started the environment must be reloaded via ",(0,a.kt)("inlineCode",{parentName:"p"},"direnv reload"),". When using the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/GaloyMoney/galoy/blob/Makefile"},"make command")," this will happen automatically."),(0,a.kt)("h3",{id:"development"},"Development"),(0,a.kt)("p",null,"To start the GraphQL server and its dependencies:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ make start\n")),(0,a.kt)("p",null,"Alernatively, to start the GraphQL server in watch mode (with automatic restart on changes):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ make watch\n")),(0,a.kt)("h4",{id:"using-graphiql"},"Using GraphiQL"),(0,a.kt)("p",null,"You can load GraphiQL, a web GUI for GraphQL. Start the server and open the following url:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"http://localhost:4001/graphql"},"http://localhost:4001/graphql")," (admin API)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"http://localhost:4002/graphql"},"http://localhost:4002/graphql")," (end user API)")),(0,a.kt)("h4",{id:"docker-compose"},"Docker compose"),(0,a.kt)("p",null,"The docker compose file is split into ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose.override.yml"),". By default the override file is merged in and exposes ports on your host machine to various containers. During CI testing we ignore the override file in order to contain tests within a docker network. This is achieved by specifically calling out the docker compose file to use ex: ",(0,a.kt)("inlineCode",{parentName:"p"},"docker compose -f docker-compose.yml ..."),"."),(0,a.kt)("h3",{id:"testing"},"Testing"),(0,a.kt)("p",null,"To run the test suite you can run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ make test\n")),(0,a.kt)("p",null,"To execute the test suite ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/GaloyMoney/galoy/blob/main/DEV.md#runtime-dependencies"},"runtime dependencies")," must be running."),(0,a.kt)("h4",{id:"run-unit-tests"},"Run unit tests"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ yarn test:unit\n# or\n$ make unit\n")),(0,a.kt)("p",null,"Runtime dependencies are not required"),(0,a.kt)("h4",{id:"run-integration-tests"},"Run integration tests"),(0,a.kt)("p",null,"To execute the integration tests ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/GaloyMoney/galoy/blob/main/DEV.md#runtime-dependencies"},"runtime dependencies")," must be running."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ yarn test:integration\n# or\n$ make integration\n")),(0,a.kt)("p",null,"The integration tests are ",(0,a.kt)("em",{parentName:"p"},"not")," fully idempotent (yet) so currently to re-run the tests, run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ make reset-integration\n")),(0,a.kt)("h4",{id:"run-e2e-tests"},"Run e2e tests"),(0,a.kt)("p",null,"To execute the e2e tests ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/GaloyMoney/galoy/blob/main/DEV.md#runtime-dependencies"},"runtime dependencies")," must be running."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ yarn test:e2e\n# or\n$ make e2e\n")),(0,a.kt)("p",null,"The e2e tests should be able to run multiple times without resetting dependencies, however they are ",(0,a.kt)("em",{parentName:"p"},"not")," fully idempotent so if you are having issues you can reset the dependencies and run again with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ make reset-e2e\n")),(0,a.kt)("h4",{id:"run-specific-test-file"},"Run specific test file"),(0,a.kt)("p",null,"To execute a specific test file:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Unit")),(0,a.kt)("p",null,"Example to run ",(0,a.kt)("inlineCode",{parentName:"p"},"test/unit/config.spec.ts")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ TEST=utils yarn test:unit\n# or\n$ TEST=utils make unit\n")),(0,a.kt)("p",null,"where ",(0,a.kt)("inlineCode",{parentName:"p"},"utils")," is the name of the file ",(0,a.kt)("inlineCode",{parentName:"p"},"utils.spec.ts")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Integration")),(0,a.kt)("p",null,"Example to run ",(0,a.kt)("inlineCode",{parentName:"p"},"test/integration/01-setup/01-connection.spec.ts")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ TEST=01-connection yarn test:integration\n# or\n$ TEST=01-connection make integration\n")),(0,a.kt)("p",null,"if within a specific test suite you want to run/debug only a describe or it(test) block please use:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://jestjs.io/docs/api#describeonlyname-fn"},"describe.only"),": just for debug purposes"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://jestjs.io/docs/api#testonlyname-fn-timeout"},"it.only"),": just for debug purposes"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://jestjs.io/docs/api#testskipname-fn"},"it.skip"),": use it when a test is temporarily broken. Please don't commit commented test cases")),(0,a.kt)("h4",{id:"testing-migrations"},"Testing migrations"),(0,a.kt)("p",null,"Migrations are stored in the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/migrations")," folder. When developing migrations the best way to test them on a clean database is:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"make test-migrate\n")),(0,a.kt)("h4",{id:"known-issues"},"Known issues"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Test suite timeouts"),": increase jest timeout value. Example:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"# 120 seconds\n$ JEST_TIMEOUT=120000 yarn test:integration\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Integration tests running slow"),": we use docker to run dependencies (redis, mongodb, bitcoind and 4 lnds) so the entire test suite is disk-intensive."),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Please make sure that you are running docker containers in a solid state drive (SSD)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Reduce lnd log disk usage: change debuglevel to critical"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"# ./dev/lnd/lnd.conf\ndebuglevel=critical\n")))))),(0,a.kt)("h3",{id:"running-checks"},"Running checks"),(0,a.kt)("p",null,"It's recommended that you use plugins in your editor to run ESLint checks and perform Prettier formatting on-save."),(0,a.kt)("p",null,"To run all the checks required for the code to pass GitHub actions check:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ make check-code\n(...)\n$ echo $?\n0\n")),(0,a.kt)("p",null,"If you need to run Prettier through the command line, you can use:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ yarn prettier -w .\n")))}c.isMDXComponent=!0}}]);